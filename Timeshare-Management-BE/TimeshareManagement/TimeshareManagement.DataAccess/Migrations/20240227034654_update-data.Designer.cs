// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeshareManagement.DataAccess.Data;

#nullable disable

namespace TimeshareManagement.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240227034654_update-data")]
    partial class updatedata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.BookingRequest", b =>
                {
                    b.Property<int>("bookingRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bookingRequestId"));

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("bookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("roomID")
                        .HasColumnType("int");

                    b.HasKey("bookingRequestId");

                    b.HasIndex("Id");

                    b.HasIndex("roomID");

                    b.ToTable("BookingRequests");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.Place", b =>
                {
                    b.Property<int>("placeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("placeId"));

                    b.Property<string>("placeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("placeId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.Room", b =>
                {
                    b.Property<int>("roomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("roomID"));

                    b.Property<DateTime?>("Checkin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Checkout")
                        .HasColumnType("datetime2");

                    b.Property<int>("Nights")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<int>("Sleeps")
                        .HasColumnType("int");

                    b.Property<int?>("timeshareDetailId")
                        .HasColumnType("int");

                    b.HasKey("roomID");

                    b.HasIndex("timeshareDetailId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.RoomAmenities", b =>
                {
                    b.Property<int>("roomAmenitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("roomAmenitiesId"));

                    b.Property<string>("roomAmenitiesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("roomDetailId")
                        .HasColumnType("int");

                    b.HasKey("roomAmenitiesId");

                    b.HasIndex("roomDetailId");

                    b.ToTable("RoomAmenities");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.RoomDetail", b =>
                {
                    b.Property<int>("roomDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("roomDetailId"));

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("roomID")
                        .HasColumnType("int");

                    b.HasKey("roomDetailId");

                    b.HasIndex("roomID");

                    b.ToTable("RoomDetail");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.Timeshare", b =>
                {
                    b.Property<int>("timeshareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("timeshareId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("placeId")
                        .HasColumnType("int");

                    b.Property<string>("timeshareName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("timeshareStatusId")
                        .HasColumnType("int");

                    b.HasKey("timeshareId");

                    b.HasIndex("Id");

                    b.HasIndex("placeId");

                    b.HasIndex("timeshareStatusId");

                    b.ToTable("Timeshares");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.TimeshareDetail", b =>
                {
                    b.Property<int>("timeshareDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("timeshareDetailId"));

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("timeshareId")
                        .HasColumnType("int");

                    b.HasKey("timeshareDetailId");

                    b.HasIndex("timeshareId");

                    b.ToTable("TimesharesDetail");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.TimeshareStatus", b =>
                {
                    b.Property<int>("timeshareStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("timeshareStatusId"));

                    b.Property<string>("timeshareStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("timeshareStatusId");

                    b.ToTable("TimesharesStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TimeshareManagement.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TimeshareManagement.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeshareManagement.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TimeshareManagement.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.BookingRequest", b =>
                {
                    b.HasOne("TimeshareManagement.Models.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.HasOne("TimeshareManagement.Models.Models.Room", "room")
                        .WithMany()
                        .HasForeignKey("roomID");

                    b.Navigation("User");

                    b.Navigation("room");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.Room", b =>
                {
                    b.HasOne("TimeshareManagement.Models.Models.TimeshareDetail", "timeshareDetail")
                        .WithMany()
                        .HasForeignKey("timeshareDetailId");

                    b.Navigation("timeshareDetail");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.RoomAmenities", b =>
                {
                    b.HasOne("TimeshareManagement.Models.Models.RoomDetail", "RoomDetail")
                        .WithMany()
                        .HasForeignKey("roomDetailId");

                    b.Navigation("RoomDetail");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.RoomDetail", b =>
                {
                    b.HasOne("TimeshareManagement.Models.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("roomID");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.Timeshare", b =>
                {
                    b.HasOne("TimeshareManagement.Models.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.HasOne("TimeshareManagement.Models.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("placeId");

                    b.HasOne("TimeshareManagement.Models.Models.TimeshareStatus", "TimeshareStatus")
                        .WithMany()
                        .HasForeignKey("timeshareStatusId");

                    b.Navigation("Place");

                    b.Navigation("TimeshareStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeshareManagement.Models.Models.TimeshareDetail", b =>
                {
                    b.HasOne("TimeshareManagement.Models.Models.Timeshare", "Timeshare")
                        .WithMany()
                        .HasForeignKey("timeshareId");

                    b.Navigation("Timeshare");
                });
#pragma warning restore 612, 618
        }
    }
}
